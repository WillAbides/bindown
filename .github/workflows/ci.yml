name: ci
on:
  push:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
      - labeled
      - unlabeled
jobs:
  test:
    strategy:
      matrix:
        platform:
          - ubuntu-22.04
          - macos-13
#          - windows-2022
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    if: github.event_name != 'pull_request' || github.event.action != 'labeled' && github.event.action != 'unlabeled'
    steps:
      - uses: actions/checkout@v3
      - uses: WillAbides/setup-go-faster@v1
        id: setup-go
        with:
          go-version: '1.20.x'
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.setup-go.outputs.GOCACHE }}
            ${{ steps.setup-go.outputs.GOMODCACHE }}
          key: ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-test
      - run: script/test
        shell: sh
  lint:
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request' || github.event.action != 'labeled' && github.event.action != 'unlabeled'
    steps:
      - uses: actions/checkout@v3
      - uses: WillAbides/setup-go-faster@v1
        id: setup-go
        with:
          go-version: '1.20.x'
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.setup-go.outputs.GOCACHE }}
            ${{ steps.setup-go.outputs.GOMODCACHE }}
            .bindown
          key: ${{ runner.os }}-go-lint-${{ hashFiles('**/go.sum', 'bindown.yml', 'script/*') }}
          restore-keys: ${{ runner.os }}-go-lint
      - run: script/lint
  generate:
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request' || github.event.action != 'labeled' && github.event.action != 'unlabeled'
    steps:
      - uses: actions/checkout@v3
      - uses: WillAbides/setup-go-faster@v1
        id: setup-go
        with:
          go-version: '1.20.x'
      - name: configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.setup-go.outputs.GOCACHE }}
            ${{ steps.setup-go.outputs.GOMODCACHE }}
          key: ${{ runner.os }}-go-generate-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-generate
      - run: script/generate --check
  release:
    runs-on: ubuntu-22.04
    needs:
      - test
      - lint
      - generate
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: WillAbides/setup-go-faster@v1
        id: setup-go
        with:
          go-version: '1.20.x'
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.setup-go.outputs.GOCACHE }}
            ${{ steps.setup-go.outputs.GOMODCACHE }}
          key: ${{ runner.os }}-go-release-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-release
      - uses: WillAbides/release-train@v1.6.1
        with:
          create_release: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
          validate_version: |
            set -e
            if [ -z "$RELEASE_VERSION" ]; then
              echo "RELEASE_VERSION not set"
              exit 0
            fi
            MODULE_VERSION_SUFFIX="$(go list -m | grep -o '/v[0-9][0-9]*$' || true)"
            MAJOR_VERSION="${RELEASE_VERSION%%.*}"
            if [ "$MAJOR_VERSION" -ge 2 ] && [ "$MODULE_VERSION_SUFFIX" != "/v$MAJOR_VERSION" ]; then
              echo "module version suffix must be /v$MAJOR_VERSION"
              exit 1
            elif [ "$MAJOR_VERSION" -lt 2 ] && [ -n "$MODULE_VERSION_SUFFIX" ]; then
              echo "Module name must not end with /v[0-9][0-9]*"
              exit 1
            fi
          post_release_hook: |
            set -e
            if [ -z "$RELEASE_VERSION" ]; then
              echo "RELEASE_VERSION not set"
              exit 0
            fi
            script/bindown install goreleaser
            bin/goreleaser release --clean
            go run ./internal/build-bootstrapper -tag "v$RELEASE_VERSION" > bootstrap-bindown.sh
            gh release upload "v$RELEASE_VERSION" bootstrap-bindown.sh
