// Code generated by MockGen. DO NOT EDIT.
// Source: config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDownloader is a mock of Downloader interface
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// ErrString mocks base method
func (m *MockDownloader) ErrString(binary string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrString", binary)
	ret0, _ := ret[0].(string)
	return ret0
}

// ErrString indicates an expected call of ErrString
func (mr *MockDownloaderMockRecorder) ErrString(binary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrString", reflect.TypeOf((*MockDownloader)(nil).ErrString), binary)
}

// MatchesOS mocks base method
func (m *MockDownloader) MatchesOS(opSys string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesOS", opSys)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchesOS indicates an expected call of MatchesOS
func (mr *MockDownloaderMockRecorder) MatchesOS(opSys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesOS", reflect.TypeOf((*MockDownloader)(nil).MatchesOS), opSys)
}

// MatchesArch mocks base method
func (m *MockDownloader) MatchesArch(arch string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesArch", arch)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchesArch indicates an expected call of MatchesArch
func (mr *MockDownloaderMockRecorder) MatchesArch(arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesArch", reflect.TypeOf((*MockDownloader)(nil).MatchesArch), arch)
}

// HasChecksum mocks base method
func (m *MockDownloader) HasChecksum(checksum string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChecksum", checksum)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChecksum indicates an expected call of HasChecksum
func (mr *MockDownloaderMockRecorder) HasChecksum(checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChecksum", reflect.TypeOf((*MockDownloader)(nil).HasChecksum), checksum)
}

// UpdateChecksum mocks base method
func (m *MockDownloader) UpdateChecksum(cellarDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChecksum", cellarDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChecksum indicates an expected call of UpdateChecksum
func (mr *MockDownloaderMockRecorder) UpdateChecksum(cellarDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChecksum", reflect.TypeOf((*MockDownloader)(nil).UpdateChecksum), cellarDir)
}

// Install mocks base method
func (m *MockDownloader) Install(downloaderName, cellarDir, targetDir string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", downloaderName, cellarDir, targetDir, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockDownloaderMockRecorder) Install(downloaderName, cellarDir, targetDir, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockDownloader)(nil).Install), downloaderName, cellarDir, targetDir, force)
}

// Validate mocks base method
func (m *MockDownloader) Validate(cellarDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", cellarDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockDownloaderMockRecorder) Validate(cellarDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockDownloader)(nil).Validate), cellarDir)
}
